---
title: "CCDR Explorer Web Application Documentation"
author: "Teal Insights"
date: "2025-05-08"
format:
  pdf
---

**Document Purpose:** To provide the client with an overview of the CCDR Explorer web application's architecture, capabilities, and usage based on the current state of the codebase.

**Prepared By:** Teal Insights

---

## CCDR Explorer Web Application Documentation (Draft)

### 1. Introduction

This document details the CCDR Explorer web application developed by Teal Insights. The application provides an AI-powered interface for exploring the World Bank's Country and Climate Development Reports (CCDRs). It facilitates semantic search and interaction via a chat interface. It is protected by an authentication system and has features for organization management and role-based access control.

Currently, the web application is deployed on Modal at https://teal-insights--ccdr-explorer-fastapi-app.modal.run, while the PostgreSQL database backend is hosted on Digital Ocean. Total infrastructure costs amount to about $35/month at current usage levelsâ€”$20/month for Resend, $15/month for Digital Ocean, and $0/month for Modal.

### 2. Application Overview

The CCDR Explorer is a multi-user web application built using modern Python web technologies. Its core functionality revolves around a chat interface powered by the OpenAI Assistants API, allowing users to ask questions and retrieve information sourced from the CCDR documents.

Key aspects include:

*   **AI-Powered Chat:** Users interact with an AI assistant knowledgeable about the CCDRs.
*   **Corpus Search:** The system can perform semantic search over the CCDR corpus and provide document citations and download links.
*   **Code Execution:** The AI assistant can write and execute Python code to generate charts to display in the chat interface or CSV files to download.
*   **Real-time Interaction:** Responses are streamed back to the user interface for a dynamic experience.
*   **User Management:** Standard features like registration, login, profile management, and security (password reset, email updates).
*   **Multi-Tenancy:** Supports multiple organizations, each with its own users and roles.
*   **Access Control:** A robust Role-Based Access Control (RBAC) system manages user permissions within organizations.

### 3. Key Capabilities & Features

The following features have been implemented:

1.  **User Authentication & Account Management:**
    *   User Registration with password strength validation.
    *   Secure Login using email and password (bcrypt hashing).
    *   Session management using JWT (Access and Refresh tokens stored in secure HTTP-only cookies).
    *   Logout functionality.
    *   Password Reset flow via email verification (using a third-party email service called Resend).
    *   Email Address Update flow via email verification (using Resend).
    *   Secure Account Deletion with password confirmation.

2.  **Chat Interface:**
    *   Primary user interface for interacting with the AI assistant.
    *   Integration with OpenAI Assistants API.
    *   Real-time streaming of assistant responses using Server-Sent Events (SSE).
    *   Rendering of assistant responses containing Markdown, including handling of citations and code blocks.
    *   Support for OpenAI File Search and Code Interpreter tool calls.
    *   Rendering assistant-generated file references as in-text bibliographic citations with download links to PDF source documents hosted by the World Bank.
    *   Ability to display images and download files generated by the OpenAI Code Interpreter tool.

3.  **Organization Management:**
    *   Users can create new organizations.
    *   Organization names can be edited (requires permission).
    *   Organizations can be deleted (requires permission, cascades to roles).
    *   Organization details page displaying members and roles.
    *   Users can be invited to join the organization via email (using Resend).

4.  **Role-Based Access Control (RBAC):**
    *   Default roles (Owner, Administrator, Member) created automatically for new organizations.
    *   Predefined permissions (`ValidPermissions` enum) associated with default roles (Owner: all, Admin: all except delete org, Member: none).
    *   Ability to create custom roles within an organization (requires permission).
    *   Ability to edit custom roles (name and assigned permissions) (requires permission).
    *   Ability to delete custom roles (if no users assigned) (requires permission).

5.  **User Management (within Organizations):**
    *   Viewing organization members and their assigned roles.
    *   Editing user roles within an organization (requires permission).
    *   Removing users from an organization (requires permission, user cannot remove self).

6.  **Invitation System:**
    *   Inviting new users to an organization via email (using Resend) (requires permission).
    *   Assigning a specific role during invitation.
    *   Invitations expire after a set duration (default 7 days).
    *   Users can accept invitations via a unique link.
    *   Acceptance flow handles both new user registration and existing user login scenarios.
    *   Prevents inviting users already in the organization or with existing active invitations.
    *   Displays pending invitations on the organization page.

7.  **User Profile:**
    *   Users can view their basic information (name, email).
    *   Users can update their name.
    *   Users can upload/update their avatar image (with validation for size, type, dimensions, and cropping to square).
    *   Displays a list of organizations the user belongs to.
    *   Provides access to security features (email update request, password change request via reset flow, account deletion).

8.  **Static Content Pages:**
    *   Basic framework for serving static pages like "About", "Privacy Policy", "Terms of Service".

### 4. Architecture

The application follows a standard modern web architecture:

*   **Backend Framework:** FastAPI (Python asynchronous web framework).
*   **Database:** PostgreSQL.
*   **ORM:** SQLModel (combines Pydantic and SQLAlchemy).
*   **Templating:** Jinja2 for server-side HTML rendering.
*   **Frontend:**
    *   HTML, CSS (Bootstrap 5 for styling, with custom additions).
    *   JavaScript:
        *   HTMX: For simplified AJAX requests and dynamic UI updates without full page reloads.
        *   Server-Sent Events (SSE): For real-time streaming of chat responses (`sse.js` extension for HTMX).
        *   Custom JavaScript (`stream-md.js`): For handling streaming Markdown rendering in the chat.
*   **Core Logic:** Separated into `utils/` directory (core auth, db operations, chat helpers, models, image processing).
*   **API Endpoints:** Organized into `routers/` for modularity (account, chat, organization, user, etc.).
*   **Error Handling:** Custom exception classes and FastAPI middleware exception handlers provide user-friendly error pages and redirects.
*   **External Services:**
    *   **OpenAI:** Assistants API for the core chat functionality.
    *   **Resend:** For sending transactional emails (password reset, invitations, email confirmation).
*   **Deployment:** Configured for deployment via Modal (a serverless platform).
*   **Development Environment:** Uses Docker Compose for local PostgreSQL database setup and `uv` for Python dependency management.
*   **Testing & CI/CD:** GitHub Actions workflow (`test.yml`) runs `mypy` for type checking and `pytest` for unit/integration tests against a PostgreSQL service container.

``` {mermaid}
%%| fig-width: 6
graph TD
    A[User Browser] -- HTTP --> B(FastAPI Application / Uvicorn);
    B -- Jinja2/HTMX/SSE --> A;
    B -- SQLModel --> C(PostgreSQL Database);
    C -- Data --> B;
    B -- API Calls --> D(OpenAI Assistants API);
    D -- Responses/Streams --> B;
    B -- API Calls --> E(Resend API);
    E -- Email Status --> B;
```

### 5. Usage Guide

It's important to understand what kinds of questions a retrieval-augmented generation (RAG) system can answer well, and what kinds it cannot.

The way the File Search tool works is that PDF files are "chunked" into sections about 800 tokens (600 words) long, and then "embedded" (converted into a high-dimensional numerical matrix that captures the semantic meaning of the text). User queries can then be similarly embedded, and the similarity computed between the query and each chunk for "fuzzy" matching between the semantic meaning of the query and the text. The top chunks are then used by the AI assistant to answer the query, and the answer is returned to the user.

What this means in practice is that the File Search tool is good at answering questions about specific content that appears in the CCDRs, but it is not as good at synthesizing information from across the corpus, making serendipitous discoveries in the corpus, or finding information from outside the CCDRs to integrate into its analysis. The Code Interpreter tool does give it some capability to perform novel analysis, but it is only as good as the inputs it can discover in the corpus via semantic search. The assistant does not have the ability to search the Internet or to perform other kinds of search or retrieval over the CCDR corpus besides semantic search.

We do plan to extend the assistant's capabilities in the future to include more sophisticated search and retrieval over the CCDR corpus, as well as to return more granular citations and better user interactivity with the source material.

### 6. Development Roadmap

The following timeline illustrates key milestones achieved in the development of the CCDR Explorer:

``` {mermaid}
%%| fig-width: 6
timeline
    title CCDR Explorer Development Timeline
    section Infrastructure
        March 2025 : Database schema finalization
                   : Data scraping and ingestion
                   : Metadata integration
    section Backend
        Late March : API architecture setup
                   : Vector store implementation
                   : PDF and resource handling
        April     : Authentication system
                   : Organization management
                   : RBAC implementation
                   : Email integration
    section Frontend
        Early April : Web app and chatbot integration
                    : Chat interface styling
        Mid April   : Markdown rendering
                    : Citation display
                    : UI improvements
    section Advanced Features
        Late April  : Document linking
                    : PDF serving from World Bank
        Early May   : API security hardening
                    : Code execution capability
                    : Interactive chat improvements
```

This timeline represents work completed through early May 2025. Work still in progress includes API architecture setup, vector store implementation, and PDF and resource handling. When that is complete, we also plan to add support for non-OpenAI models and more sophisticated search and retrieval over the CCDR corpus from the frontend client.

### 7. Conclusion

The CCDR Explorer application provides a robust foundation for interacting with World Bank CCDR data through an AI chat interface. It incorporates essential features like user authentication, multi-tenancy with organization/role management, and real-time chat streaming. The architecture is modular and utilizes modern Python web technologies and best practices for continuous integration and deployment.
